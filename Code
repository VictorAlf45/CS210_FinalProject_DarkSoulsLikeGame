import pygame
import sys

# Character class(store character details)
class Character:
    def __init__(self, name, gender, character_type):
        self.name = name
        self.gender = gender
        self.character_type = character_type

        # Characters to choose
        if character_type == 'Warrior':
            self.health = 120
            self.strength = 80
            self.agility = 40
            self.defense = 70
            self.magic = 20
        elif character_type == 'Thief':
            self.health = 100
            self.strength = 50
            self.agility = 80
            self.defense = 40
            self.magic = 30
        elif character_type == 'Sorcerer':
            self.health = 80
            self.strength = 30
            self.agility = 50
            self.defense = 30
            self.magic = 80
        elif character_type == 'Wanderer':
            self.health = 90
            self.strength = 50
            self.agility = 50
            self.defense = 50
            self.magic = 30

        self.inventory = []  # List: Inventory of items carried by the character
        self.experience = 0

    # Display character's stats
    def display_info(self):
        return f"Name: {self.name}\nGender: {self.gender}\nType: {self.character_type}\nHealth: {self.health}\nStrength: {self.strength}\nAgility: {self.agility}\nDefense: {self.defense}\nMagic: {self.magic}\nExperience: {self.experience}\nInventory: {', '.join(self.inventory) if self.inventory else 'Empty'}"


# Hash table(enemies, attributes, weaknesses)
enemy_weaknesses = {
    "FireDragon": {"Weakness": "Ice", "Health": 300, "Attack": 50},
    "StoneGolem": {"Weakness": "Magic", "Health": 200, "Attack": 40},
    "DarkKnight": {"Weakness": "Light", "Health": 250, "Attack": 45},
}

# Game
def battle(character, enemy_name):
    print(f"\nBattle started with {enemy_name}!")
    if enemy_name in enemy_weaknesses:
        enemy = enemy_weaknesses[enemy_name]  # Using the hash table to retrieve the enemy's details
        print(f"Enemy {enemy_name}: Health={enemy['Health']}, Attack={enemy['Attack']}")
        print(f"Your Character: Health={character.health}, Strength={character.strength}")

        # Combat: Strike and back off
        damage_to_enemy = character.strength - enemy["Attack"]
        damage_to_player = enemy["Attack"] - character.defense

        enemy["Health"] -= max(damage_to_enemy, 0)
        character.health -= max(damage_to_player, 0)

        print(f"\nYou dealt {max(damage_to_enemy, 0)} damage to the enemy!")
        print(f"The enemy dealt {max(damage_to_player, 0)} damage to you!")

        if enemy["Health"] <= 0:
            print(f"You defeated {enemy_name}!")
            character.experience += 50
            return True
        elif character.health <= 0:
            print("You were defeated!")
            return False
    else:
        print(f"{enemy_name} is not a known enemy!")
        return False


# --- Pygame Interface ---

# Initialize pygame
pygame.init()

# Window dimensions
WIDTH = 800
HEIGHT = 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption('Souls-Like Game')

# Colors
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
RED = (255, 0, 0)
GRAY = (169, 169, 169)

# Font
font = pygame.font.SysFont("Arial", 24)


# Game class to manage game states and interactions
class Game:
    def __init__(self):
        self.character = None

        # Graph: Representing the worlds and stages as a graph where each world has a set of stages.
        self.worlds = {
            "Home Village": ["Forest", "Cave of Trials", "Mountain", "Dark Castle", "Crystal Cave", "Ancient Temple"],
            "Forest": ["Forest Stage 1", "Forest Stage 2", "Forest Stage 3", "Forest Stage 4", "Forest Stage 5",
                       "Forest Stage 6"],
            "Cave of Trials": ["Cave Stage 1", "Cave Stage 2", "Cave Stage 3", "Cave Stage 4", "Cave Stage 5",
                               "Cave Stage 6"],
            "Mountain": ["Mountain Stage 1", "Mountain Stage 2", "Mountain Stage 3", "Mountain Stage 4", "Mountain Stage 5", "Mountain Stage 6"]
        }

        self.selected_world = None
        self.gender = None
        self.character_type = None
        self.name = None

    # Character Creation
    def create_character(self, name, gender, character_type):
        self.character = Character(name, gender, character_type)

    # Function to display the Gender Selection screen
    def show_gender_selection(self):
        screen.fill(WHITE)
        title = font.render("Choose your Gender", True, BLUE)
        screen.blit(title, (WIDTH // 2 - title.get_width() // 2, 100))

        # Display gender options
        button_height = 50
        pygame.draw.rect(screen, GREEN, (WIDTH // 2 - 150, 200, 300, button_height))
        male_text = font.render("Male", True, WHITE)
        screen.blit(male_text, (WIDTH // 2 - male_text.get_width() // 2, 200))

        pygame.draw.rect(screen, GREEN, (WIDTH // 2 - 150, 270, 300, button_height))
        female_text = font.render("Female", True, WHITE)
        screen.blit(female_text, (WIDTH // 2 - female_text.get_width() // 2, 270))

        pygame.display.flip()

    # Function to handle the gender selection
    def choose_gender(self, mouse_pos):
        # Gender selection logic
        button_height = 50
        if pygame.Rect(WIDTH // 2 - 150, 200, 300, button_height).collidepoint(mouse_pos):
            self.gender = "Male"
            self.show_character_selection()
        elif pygame.Rect(WIDTH // 2 - 150, 270, 300, button_height).collidepoint(mouse_pos):
            self.gender = "Female"
            self.show_character_selection()

    #  available character types
    def show_character_selection(self):
        screen.fill(WHITE)
        title = font.render(f"Choose your Class - Gender: {self.gender}", True, BLUE)
        screen.blit(title, (WIDTH // 2 - title.get_width() // 2, 100))

        button_height = 50
        classes = ["Warrior", "Thief", "Sorcerer", "Wanderer"]
        for i, character_type in enumerate(classes):
            pygame.draw.rect(screen, GREEN, (WIDTH // 2 - 150, 200 + i * (button_height + 10), 300, button_height))
            class_text = font.render(character_type, True, WHITE)
            screen.blit(class_text, (WIDTH // 2 - class_text.get_width() // 2, 200 + i * (button_height + 10)))

        pygame.display.flip()

    # Function to handle the character type selection
    def choose_character_type(self, mouse_pos):
        # Character type selection logic
        classes = ["Warrior", "Thief", "Sorcerer", "Wanderer"]
        button_height = 50
        for i, character_type in enumerate(classes):
            if pygame.Rect(WIDTH // 2 - 150, 200 + i * (button_height + 10), 300, button_height).collidepoint(
                    mouse_pos):
                self.character_type = character_type
                self.show_name_input()

    # Function to show the input screen for character's name
    def show_name_input(self):
        screen.fill(WHITE)
        title = font.render(f"Enter your {self.character_type} Name", True, BLUE)
        screen.blit(title, (WIDTH // 2 - title.get_width() // 2, 100))

        pygame.display.flip()

    # Function to set the character's name and display stats
    def set_character_name(self, name):
        self.name = name
        self.create_character(self.name, self.gender, self.character_type)
        self.show_character_stats()

    # Function to display character's stats
    def show_character_stats(self):
        # Show character details after selection
        screen.fill(WHITE)
        stats = self.character.display_info()
        stats_text = font.render(stats, True, BLUE)
        screen.blit(stats_text, (WIDTH // 2 - stats_text.get_width() // 2, 100))

        pygame.display.flip()
        pygame.time.wait(2000)  # Wait for 2 seconds before moving to next screen
        self.show_world_selection()

    # Function to show the world selection screen (Graph of worlds and stages)
    def show_world_selection(self):
        screen.fill(WHITE)
        title = font.render("Choose your World", True, BLUE)
        screen.blit(title, (WIDTH // 2 - title.get_width() // 2, 100))

        button_height = 50
        for i, world in enumerate(self.worlds.keys()):
            pygame.draw.rect(screen, GREEN, (WIDTH // 2 - 150, 200 + i * (button_height + 10), 300, button_height))
            world_text = font.render(world, True, WHITE)
            screen.blit(world_text, (WIDTH // 2 - world_text.get_width() // 2, 200 + i * (button_height + 10)))

        pygame.display.flip()

    # Function to handle the world selection
    def choose_world(self, mouse_pos):
        # World selection logic
        button_height = 50
        for i, world in enumerate(self.worlds.keys()):
            if pygame.Rect(WIDTH // 2 - 150, 200 + i * (button_height + 10), 300, button_height).collidepoint(
                    mouse_pos):
                self.selected_world = world
                self.start_game()

    # Function to start the game in the selected world
    def start_game(self):
        screen.fill(WHITE)
        title = font.render(f"Entering the world: {self.selected_world}", True, BLUE)
        screen.blit(title, (WIDTH // 2 - title.get_width() // 2, 100))

        pygame.display.flip()
        pygame.time.wait(2000)  # Wait for 2 seconds before starting the game


# Game Loop

game = Game()

running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

        elif event.type == pygame.MOUSEBUTTONDOWN:
            if game.gender is None:
                game.choose_gender(event.pos)  # Handle gender choice
            elif game.character_type is None:
                game.choose_character_type(event.pos)  # Handle character type choice
            elif game.name is None:
                game.set_character_name("Hero")  # Default name for simplicity
            elif game.selected_world is None:
                game.choose_world(event.pos)  # Handle world choice

    pygame.display.update()
